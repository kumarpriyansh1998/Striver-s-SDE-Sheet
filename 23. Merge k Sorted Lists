

// /**
//  * Definition for singly-linked list.
//  * public class ListNode {
//  *     int val;
//  *     ListNode next;
//  *     ListNode() {}
//  *     ListNode(int val) { this.val = val; }
//  *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
//  * }
//  */
// class Solution {
    
//     public static class pair implements Comparable<pair>{
//         ListNode node;
//         pair(ListNode node){
//             this.node = node;
            
//         }
//         @Override
//         public int compareTo(pair p){
//             return this.node.val-p.node.val;
//         }
//     }
    
//     public ListNode mergeKLists(ListNode[] lists) {
        
//         PriorityQueue<pair> pq = new PriorityQueue<>();
//         ListNode head = new ListNode(-1);
//         if(lists.length==0) return null;
//         int n = lists.length;
//         for(int i=0;i<n;i++){
//             if(lists[i]==null) continue;
//             pair p =  new pair(lists[i]);
//             pq.add(p);
            
//         }
        
//         ListNode curr = head;
//         while(pq.size()>0){
            
//             pair p = pq.remove();
//             ListNode new_node = new ListNode(p.node.val);
//             curr.next = new_node;
//             curr = curr.next;
//             if(p.node.next!=null){
//                 pq.add(new pair(p.node.next));
//             }
            
            
//         }
        
        
//         return head.next;
        
        
        
        
        
//     }
// }



// O(NK*K)

// class Solution {
//     public ListNode mergeKLists(ListNode[] lists) {
//         if(lists.length==0) return null;
//         if(lists.length==1) return lists[0];
        
//         ListNode l1 = lists[0];
//         for(int i=1;i<lists.length;i++){
//             l1 = merge_two(l1,lists[i]);
//         }
        
//         return l1;
        
        
        
//     }
    
    
//     public ListNode merge_two(ListNode l1,ListNode l2){
//         if(l1==null) return l2;
//         if(l2==null) return l1;
//         ListNode dummy = new ListNode(-1);
//         ListNode prev = dummy;
//         while(l1!=null && l2!=null){
            
//             if(l1.val<l2.val){
//                 prev.next =l1;
//                 l1 = l1.next;
//             }else{
//                 prev.next =l2;
//                 l2 = l2.next;
//             }
            
//             prev = prev.next;
        
//         }
        
//         if(l1==null) prev.next = l2;
//         else if(l2==null) prev.next = l1;
        
//         return dummy.next;
//     }
// }



// O(NKlogK)

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        
        int l = 0;
        int h = lists.length-1;
        return merge(lists,l,h);
        
    }
    
    
    
    public ListNode merge(ListNode lists[],int l, int h){
        if(l>h) return null;
        if(l==h) return lists[l];
        int mid = (l+h)/2;
        ListNode l1 = merge(lists,l,mid);
        ListNode l2 = merge(lists,mid+1,h);
        return merge_two(l1,l2);
        
        
        
        
    }
    
        public ListNode merge_two(ListNode l1,ListNode l2){
        if(l1==null) return l2;
        if(l2==null) return l1;
        ListNode dummy = new ListNode(-1);
        ListNode prev = dummy;
        while(l1!=null && l2!=null){
            
            if(l1.val<l2.val){
                prev.next =l1;
                l1 = l1.next;
            }else{
                prev.next =l2;
                l2 = l2.next;
            }
            
            prev = prev.next;
        
        }
        
        if(l1==null) prev.next = l2;
        else if(l2==null) prev.next = l1;
        return dummy.next;
    }
}
