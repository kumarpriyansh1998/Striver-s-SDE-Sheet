https://www.pepcoding.com/resources/online-java-foundation/hashmap-and-heap/priority-queue-using-heap-official/ojquestion
import java.io.*;
import java.util.*;

public class Main {

  public static class PriorityQueue {
    ArrayList<Integer> data;

    public PriorityQueue() {
      data = new ArrayList<>();
    }

    public void add(int val) {
      // write your code here
      data.add(val);
      int n = data.size()-1;
      int parent = (n-1)/2;;
      upheapify(parent,n);
    }

    public int remove() {
      // write your code here
      if(size()==0){
          System.out.println("Underflow");
          return -1;
      }
      
      int temp = data.get(0);
      data.set(0,data.get(data.size()-1));
      data.remove(data.size()-1);
      downheapify(0);
      return temp;
      
    }

    public int peek() {
      // write your code here
      if(size()==0){
          System.out.println("Underflow");
          return -1;
      }
      return data.get(0);
    }

    public int size() {
      // write your code here
      return data.size();
    }
    
    public void upheapify(int p,int c){
        
        if(c==0 || data.get(c)>data.get(p)) return;
        else{
            swap(p,c);
            c= p;
            p = ((p-1)/2;
            upheapify(p,c);
        }
        
        
        
    }
    public void downheapify(int i){
        
        if(i>=data.size()-1) return;
        int p = data.get(i);
        int c1 = -1;
        int c2 = -1;
        int min = i;;
        if(2*i+1 < data.size()) {
            c1 = 2*i+1;
            if(data.get(c1)<p) min = c1;
        }
        if(2*i+2 < data.size()){
            c2 =2*i+2;
            if(data.get(c2)<data.get(min)) min = c2;
        }
        
        
        if(min == i) return;
        else {
            swap(min,i);
            downheapify(min);
        }
            
        
    }
    
    public void swap(int i,int j){
        int temp = data.get(i);
        data.set(i,data.get(j));
        data.set(j,temp);
    }
    
  }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    PriorityQueue qu = new PriorityQueue();

    String str = br.readLine();
    while (str.equals("quit") == false) {
      if (str.startsWith("add")) {
        int val = Integer.parseInt(str.split(" ")[1]);
        qu.add(val);
      } else if (str.startsWith("remove")) {
        int val = qu.remove();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("peek")) {
        int val = qu.peek();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("size")) {
        System.out.println(qu.size());
      }
      str = br.readLine();
    }
  }
}
