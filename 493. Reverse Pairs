https://leetcode.com/problems/reverse-pairs/
class Solution {
    public int reversePairs(int[] nums) {
        
        int n = nums.length;
        if(n==1) return 0;
        long nu[] = new long[nums.length];
        int z =0 ;
        for(int i : nums){
            nu[z++] = i;
        }
        long so[] = merge_sort(nu,0,n-1);
        // System.out.println(Arrays.toString(so));
        return count;
        
    }
    
    public int count = 0;
    
    
    public long[] merge_sort(long nums[],int l,int r){
        if(l==r){
            return new long[]{nums[l]};
        }
        
        int mid = (l+r)/2;
        long left[] = merge_sort(nums,l,mid);
        long right[] = merge_sort(nums,mid+1,r);
        
        int i=0,j=0;
        while(j<right.length){
            
            while(i<left.length && left[i]<=(2*right[j])){
                i++;
            }
            count+=(left.length-i);

            j++;
        }
        
        return merge(left,right);
        
    }
    
    
    public long[] merge(long left[],long right[]){
        
        int a = 0;
        int b =0;
        int n1 = left.length;
        int n2 = right.length;
        long answer[] = new long[n1+n2];
        int ind =0;
        while(a<n1 && b<n2){
            
            if(left[a]==right[b]){
                answer[ind] = left[a];
                a++;
                ind++;
                answer[ind] = right[b];
                b++;
                ind++;
            }
            else if(left[a]<right[b]){
                answer[ind] = left[a];
                ind++;
                a++;
            }
            else{
                answer[ind] = right[b];
                b++;
                ind++;
            }
            
            
        }
        
        if(a==n1){
            while(b<n2){
                answer[ind] = right[b];
                b++;
                ind++;
            }
        }
        else if(b==n2){
            while(a<n1){
                answer[ind] = left[a];
                a++;
                ind++;
            }
        }
        
        
        
        return answer;
        
        
        
    }
    
    
}
