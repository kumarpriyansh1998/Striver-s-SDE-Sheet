/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public class index{
        int ps;
        int pe;
        int is;
        int ie;
        index(int ps,int pe,int is,int ie){
            this.ps = ps;
            this.pe = pe;
            this.is = is;
            this.ie = ie;
        }
    }
    
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        
        int n= preorder.length;
        int ps =0,is = 0;
        int pe= n-1,ie = n;
        index ind = new index(ps,pe,is,ie);
        return func(ind,preorder,inorder);
    }
    
    public TreeNode func(index ind,int preorder[],int inorder[]){
        
        int ps = ind.ps;
        int pe = ind.pe;
        int is = ind.is;
        int ie = ind.ie;
        if(ps>pe || is>ie) return null;
        if(pe==ps || is==ie) return new TreeNode(preorder[pe]);
        
        
        int temp = preorder[ps];
        int i = is;
        for(i=is;i<=ie;i++){
            if(inorder[i]==temp) break;
        }
        
        int len = i-is;
        index newindexl = new index(ps+1,ps+len,is,i-1);
        index newindexr = new index(ps+len+1,pe,i+1,ie);
        TreeNode root = new TreeNode(preorder[ps]);
        root.left = func(newindexl,preorder,inorder);
        root.right = func(newindexr,preorder,inorder);
        return root;
        
        
        
        
        
        
        
        
        
    }
}
