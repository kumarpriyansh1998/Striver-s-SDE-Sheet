/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        // l1 = reverse(l1);
        // l2 = reverse(l2);
        
        ListNode temp1 = l1,temp2 = l2;
        int carry= 0;
        ListNode newhead = new ListNode(-1);
        ListNode ite = newhead;
        while(temp1!=null && temp2!=null){
            int val = temp1.val+temp2.val+carry;
            int value = val%10;
            carry = val/10;
            ListNode newNode =new ListNode(value);
            ite.next = newNode;
            ite = ite.next;
            temp1 = temp1.next;
            temp2 = temp2.next;
            
        }
        
        
        if(temp1==null){
            while(temp2!=null){
                int sum = temp2.val+carry;
                carry = sum/10;
                int val = sum%10;
                ListNode newNode = new ListNode(val);
                ite.next = newNode;
                ite = ite.next;
                temp2 = temp2.next;
            }
            if(carry!=0) ite.next = new ListNode(carry);
             
        }else if(temp2==null){
              while(temp1!=null){
                int sum = temp1.val+carry;
                carry = sum/10;
                int val = sum%10;
                ListNode newNode = new ListNode(val);
                ite.next = newNode;
                  ite = ite.next;
                  temp1 = temp1.next;
            }
            if(carry!=0) ite.next = new ListNode(carry);
        }
        
        return newhead.next;
        
        
    }
    
    public ListNode reverse(ListNode head){
        if(head==null || head.next==null) return head;
        ListNode temp = reverse(head.next);
        head.next.next = head;
        head.next = null;
        return temp;
    }
}
