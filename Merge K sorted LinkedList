/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    public static class pair implements Comparable<pair>{
        ListNode node;
        pair(ListNode node){
            this.node = node;
            
        }
        @Override
        public int compareTo(pair p){
            return this.node.val-p.node.val;
        }
    }
    
    public ListNode mergeKLists(ListNode[] lists) {
        
        PriorityQueue<pair> pq = new PriorityQueue<>();
        ListNode head = new ListNode(-1);
        if(lists.length==0) return null;
        int n = lists.length;
        for(int i=0;i<n;i++){
            if(lists[i]==null) continue;
            pair p =  new pair(lists[i]);
            pq.add(p);
            
        }
        
        ListNode curr = head;
        while(pq.size()>0){
            
            pair p = pq.remove();
            ListNode new_node = new ListNode(p.node.val);
            curr.next = new_node;
            curr = curr.next;
            if(p.node.next!=null){
                pq.add(new pair(p.node.next));
            }
            
            
        }
        
        
        return head.next;
        
        
        
        
        
    }
}
