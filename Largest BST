class Solution{
    
    // Return the size of the largest sub-tree which is also a BST
    public static class pair{
        int max;
        int min;
        boolean isbst;
        int size;
        Node node;
        
        pair(int max,int min,int size,boolean isbst,Node node){
            this.min = max;
            this.min = min;
            this.size = size;
            this.isbst = isbst;
            this.node = node;
        }

    }
    
    static int largestBst(Node root)
    {
        // Write your code here
        if(root==null) return 0;
        pair Bst = isBstsize(root);
        return Bst.size;
        
    }
    
    public static pair isBstsize(Node root){
        if(root==null) return new pair(Integer.MIN_VALUE,Integer.MAX_VALUE,0,true,null);
        pair lp = isBstsize(root.left);
        pair rp = isBstsize(root.right);
        pair curr = new pair(0,0,0,false,root);
        if(lp.isbst==true && rp.isbst==true && root.data>lp.max && root.data<rp.min){
            curr.isbst = true;
        }
        curr.max = Math.max(Math.max(lp.max,rp.max),root.data);
        curr.min = Math.min(Math.min(lp.min,rp.min),root.data);
        if(curr.isbst){
            curr.node = root;
            curr.size = lp.size+rp.size+1;
        }else if(lp.size>rp.size){
            curr.size = lp.size;
            curr.node = lp.node;
        }else{
            curr.size = rp.size;
            curr.node = rp.node;
        }
        
        
        return curr;
        
        
    }
    
}









