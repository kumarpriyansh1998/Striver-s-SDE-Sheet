//https://leetcode.com/problems/search-a-2d-matrix/



//Mathod1-------O(m+n)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        return func(matrix,0,matrix[0].length-1,target);
        
    }
    
    
    public boolean func(int matrix[][],int i,int j,int target){
        if(isValid(i,j,matrix)==false) return false;
        if(matrix[i][j]==target) return true;
        if(matrix[i][j]<target){
            return func(matrix,i+1,j,target);
        }else{
            return func(matrix,i,j-1,target);
        }
    }
    
    
    public boolean isValid(int i,int j,int matrix[][]){
        if(i<0 || j<0 || i>matrix.length-1 || j>matrix[0].length-1) return false;
        return true;
    }
}


Mathod2----------/O(log(m+n))


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        
        int R = matrix.length-1;
        int C = matrix[0].length-1;
        
        
        int l = 0;
        int r = R;
        int desired_row =0;
        while(l<=r){
            int mid = l+(r-l)/2;
            if(matrix[mid][0]==target) return true;
            if(matrix[mid][0]>target){
                r = mid-1;
            }
            else if(matrix[mid][0]<target){
                if(matrix[mid][C]>=target){
                    if(matrix[mid][C]==target) return true;
                    desired_row = mid;
                    break;
                }
                else l = mid+1;
            }
        }
        
        // System.out.println(desired_row);
        
        
        
        l = 0;
        r = C;
    while(l<=r){
        int mid = l+(r-l)/2;
        if(matrix[desired_row][mid]==target) return true;
        else if(matrix[desired_row][mid]>target){
            r = mid-1;
        }
        else{
            l = mid+1;
        }
    }
        
        
        return false;
        
        
        
        
        
            
            
        
        
        
    }
}
