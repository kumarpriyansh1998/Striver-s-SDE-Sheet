class Solution {
    public int findDuplicate(int[] nums) {
        
        // Mathod1----->Using Extra Space T->O(n), S -> O(n)
//         HashMap<Integer,Integer> hmap = new HashMap<>();
//         for(int ele:nums){
//             hmap.putIfAbsent(ele,0);
//             hmap.put(ele,hmap.get(ele)+1);
//         }
        
//         for(int ele:nums){
//             if(hmap.get(ele)>1) return ele;
//         }
        
//         return -1;
        
        
        
        
        
        
        
        // Method2------------->Optimal approach(Cycle finding) T-O(n), S->No extra space
        int fast = nums[0];
        int slow = nums[0];
        
        do{
            fast = nums[nums[fast]];
            slow = nums[slow];
        }while(fast!=slow);
        
        fast = nums[0];
        while(fast!=slow){
            fast = nums[fast];
            slow = nums[slow];
        }
        
        return fast;
        
        
        
        
        
        
        
        
        
        
    }
}
